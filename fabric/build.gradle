plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_plugin_version}"
    id "idea"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/releases/" } // Porting Lib
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    // dependencies
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_version_fabric}")

    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
}

processResources {
    from(project(":common").sourceSets.main.resources)
    from(project(":forge").file('src/generated/creategoggles')) {
        exclude('.cache/')
    }
    // Forge's data gen doesn't work with assets placed in the common project, so we place them in Forge and include them here
    from(project(":forge").sourceSets.main.resources) {
        include("assets/")
        include("data/")
    }

    duplicatesStrategy DuplicatesStrategy.INCLUDE

    inputs.property "modId", "${mod_id}"
    inputs.property "version", "${mod_version}"
    inputs.property "modName", "${mod_name}"
    inputs.property "author", "${authors}"
    inputs.property "fabric_loader_version", "${fabric_loader_version}"
    inputs.property "minecraft_version", "${minecraft_version}"
    inputs.property "architectury_version", "${architectury_version}"



    filesMatching("fabric.mod.json") {
        expand( "modId": "${mod_id}",
                "version": "${mod_version}",
                "modName": "${mod_name}",
                "author": "${authors}",
                "fabric_loader_version": "${fabric_loader_version}",
                "minecraft_version": "${minecraft_version}",
                "architectury_version": "${architectury_version}"
        )
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "[FABRIC]"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        gameVersions = ["${minecraft_version}"]
        gameLoaders = ["${project.name}"]

        //TODO add fabric/forge
        displayName = "${mod_name} ${project.version} [${project.name.toUpperCase()}]"
        var changelog_file = new File('fabric_changelog.md')
        changelog = changelog_file.exists() ?  changelog_file.text : ""

        mainPublication tasks.remapJar // Declares the publicated jar

        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
            depends {
                curseforge = "create-fabric"
                modrinth = "create-fabric"
            }
        }

        if (project.hasProperty("CF_TOKEN") || System.getenv("CF_TOKEN") != null) {
            curseforge {
                token = project.hasProperty("CF_TOKEN") ? project.property("CF_TOKEN") : System.getenv("CF_TOKEN")
                id = "${curseforge_project_id}" // Required, must be a string, ID of CurseForge project
            }
        }

        if (project.hasProperty("MODRINTH_TOKEN") || System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                mainPublicationDepends tasks.sourcesJar
                secondaryPublication tasks.sourcesJar.getArchiveFile()
                token = project.hasProperty("MODRINTH_TOKEN") ? project.property("MODRINTH_TOKEN") : System.getenv("MODRINTH_TOKEN")
                id = "${modrinth_project_id}" // Required, must be a string, ID of Modrinth project
            }
        }
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}