plugins {
    id "com.github.johnrengelman.shadow" version "${shadow_plugin_version}"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {

}

def generatedResources = file("src/generated")

sourceSets.main.resources { srcDir generatedResources }

loom {
    runs {
        data {
            data()
            programArgs "--all", "--mod", "creategoggles"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
        client {
            client()
            setConfigName("Forge Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Forge Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    forge {
        mixinConfig "creategoggles.mixins.json"
        mixinConfig "creategoggles-common.mixins.json"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version_forge}:slim"){transitive = false}
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version_forge}")
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version_forge}")

    // modApi("mekanism:Mekanism:${mekanism_version}:api")
    // modRuntimeOnly("mekanism:Mekanism:${mekanism_version}")// core

    // modApi("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}:api")
    // modRuntimeOnly("top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}")

}

processResources {
    from(project(":common").sourceSets.main.resources)
    from(file('src/generated/creategoggles')) {
        exclude('.cache/')
    }

    inputs.property "modId", "${mod_id}"
    inputs.property "version", "${mod_version}"
    inputs.property "modName", "${mod_name}"
    inputs.property "author", "${authors}"

    filesMatching("META-INF/mods.toml") {
        expand( "modId": "${mod_id}",
                "version": "${mod_version}",
                "modName": "${mod_name}",
                "author": "${authors}"
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "[FORGE]"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}